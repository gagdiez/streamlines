#!/usr/bin/env python

import argparse

import streamlines.cli


DESCRIPTION = """\
Streamline manipulation on the command line
"""


def parse_arguments():

    parser = argparse.ArgumentParser(description=DESCRIPTION)
    subparsers = parser.add_subparsers(dest='func')
    subparsers.required = True

    # The compress subparser.
    compress_subparser = subparsers.add_parser(
        'compress',
        description='Compress streamlines by approximating each streamlines '
                    'by a polygon, and then mergin colinear consecutive '
                    'segments.',
        help='Compress streamlines.')
    compress_subparser.add_argument(
        'input', metavar='input_file', type=str,
        help='STR The file that contains the streamlines to compress.')
    compress_subparser.add_argument(
        'output', metavar='output_file', type=str,
        help='STR The file where the compressed streamlines will be saved.')
    compress_subparser.set_defaults(func=streamlines.cli.compress)

    # The filter subparser.
    filter_subparser = subparsers.add_parser(
        'filter',
        description='Removes streamlines from a file based on their features. '
                    'For example, remove all streamlines with a length below '
                    '50mm using --min-length 50.',
        help='Filters streamlines based on their features.')
    filter_subparser.add_argument(
        'input', metavar='input_file', type=str,
        help='STR The file that contains the streamlines to filter. Can be of '
             'any file format supported by nibabel.')
    filter_subparser.add_argument(
        'output', metavar='output_file', type=str,
        help='STR The file where the filtered streamlines will be saved. Can '
             'be of any file format supported by nibabel.')
    filter_subparser.add_argument(
        '--min-length', metavar='FLOAT', type=float,
        help='The minimum length of streamlines included in the output.')
    filter_subparser.set_defaults(func=streamlines.cli.filter)

    # The information subparser.
    info_subparser = subparsers.add_parser(
        'info',
        description='Prints information about streamlines in a file.')
    info_subparser.add_argument(
        'input', metavar='input_file', type=str,
        help='STR The file that contains the streamlines. Can be of '
             'any file format supported by nibabel.')
    info_subparser.set_defaults(func=streamlines.cli.info)

    # The merge subparser.
    merge_subparser = subparsers.add_parser(
        'merge',
        description='Merges several streamline files into one. The merging '
                    'operation does not verify if duplicate streamlines exist.',
        help='Merges several streamline files into one.')
    merge_subparser.add_argument(
        'inputs', metavar='input_files', nargs='+',
        help='STR STR ... The files to be merged. Can be of any file format '
             'supported by nibabel.')
    merge_subparser.add_argument(
        'output', metavar='output_file', type=str,
        help='STR The file where the merged streamlines will be saved. Can '
             'be of any file format supported by nibabel.')
    merge_subparser.set_defaults(func=streamlines.cli.merge)

    # The reorient subparser.
    reorient_subparser = subparsers.add_parser(
        'reorient',
        description='Reorients the streamlines so they all have the same '
                    'orientation (similar start/finish ROI). Reorient only '
                    'makes sense if the file contains a single bundle.',
        help='Reorients streamlines of a bundle.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    reorient_subparser.add_argument(
        'input', metavar='input_file', type=str,
        help='STR The file that contains the streamlines to reorient. Can be '
             'of any file format supported by nibabel.')
    reorient_subparser.add_argument(
        'output', metavar='output_file', type=str,
        help='STR The file where the reoriented streamlines will be saved. '
             'Can be of any file format supported by nibabel.')

    # The smooth subparser.
    smooth_subparser = subparsers.add_parser(
        'smooth',
        description='Smooths streamlines using a least square b-spline. The '
                    'distance between knots controls the smoothness of the '
                    'output streamline with larger distances being smoother.',
        help='Smooths streamlines using a least square b-spline.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    smooth_subparser.add_argument(
        'input', metavar='input_file', type=str,
        help='STR The file that contains the streamlines to smooth. Can be of '
             'any file format supported by nibabel.')
    smooth_subparser.add_argument(
        'output', metavar='output_file', type=str,
        help='STR The file where the smoothed streamlines will be saved. Can '
             'be of any file format supported by nibabel.')
    smooth_subparser.add_argument(
        '--knot-distance', metavar='FLOAT', type=float, default=10.0,
        help='The distance between knots. Larger distance yield smoother '
             'streamlines.')
    smooth_subparser.set_defaults(func=streamlines.cli.smooth)

    # The transform subparser.
    transform_subparser = subparsers.add_parser(
        'transform',
        description='Transforms streamlines from one file format to another.',
        help='Transforms streamlines from one file format to another.')
    transform_subparser.add_argument(
        'input', metavar='input_file', type=str,
        help='STR The file that contains the streamlines in the original '
             'file format.')
    transform_subparser.add_argument(
        'output', metavar='output_file', type=str,
        help='STR The file where to output the streamlines.')
    transform_subparser.set_defaults(func=streamlines.cli.transform)

    # The view subparser.
    view_subparser = subparsers.add_parser(
        'view',
        description='Visualize streamlines using VTK. This is meant to be a '
                    'quality control tool and not a full featured '
                    'visualization.',
        help='View streamlines in interactive window.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    view_subparser.add_argument(
        'filename', metavar='input_file', type=str,
        help='STR The file that contains the streamlines to view. Can be of '
             'any file format supported by nibabel.')
    view_subparser.set_defaults(func=streamlines.cli.view)

    return parser.parse_args()


def main():
    args = parse_arguments()
    parameters = {key: value for key, value in vars(args).items() if key != 'func'}
    args.func(**parameters)


if __name__ == '__main__':
    main()
